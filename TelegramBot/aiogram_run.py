import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram import BaseMiddleware

from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from utils.stateform import NewAds, CheckMessage, ViewingAds, ViewingOwnAds, Profile
from DataBase.UserDB import (add_category, get_ads, insert_new_ad, get_category_id, get_location_id, close_connection, 
                            get_user_id_by_tg_id, set_user_data, get_user_data, get_categories, get_saved_by_user, 
                            remove_ad_from_saved, add_ad_in_saved)
from keyboards.keyboards import (main_kb, ads_kb_if_saved, ads_kb_if_not_saved, confirm_kb, red_kb, back_kb, filter_kb, 
                                set_user_data_kb, ads_ikb)
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# API_TOKEN = '7754829803:AAF9bmNcb635GC0emlEjkd3x8_YI75IJYz4' # main
API_TOKEN = '7588331682:AAHWaQdhjofYczgtFvFj3-EPYBzxR6dCKUY' # test
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

ads = get_ads()

@dp.message(Command("start"))
async def handle_menu_command(message: Message, state: FSMContext):
    await state.clear()
    get_user_id_by_tg_id(message.from_user.id) #–µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å
    data = get_user_data(message.from_user.id)
    await state.update_data({"first_name":data[0][0], "second_name":data[0][1], "phone":data[0][2],"email":data[0][3]})
    await enter_profile_mode(message, state)

@dp.message(F.text == "üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def handle_main_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª.", reply_markup=main_kb)

#######################################################################

async def enter_profile_mode(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM (–µ—Å–ª–∏ –µ—Å—Ç—å)
    
    data = await state.get_data()
    # print(data)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏


    profile_info = (
        "‚öôÔ∏è <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë• <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('second_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìß <b>Email:</b> {data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        text=profile_info,
        reply_markup=set_user_data_kb  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
    )
    
    # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    await state.set_state(None)

@dp.message(F.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message, state: FSMContext):
    data = get_user_data(message.from_user.id)
    await state.update_data({"first_name":data[0][0], "second_name":data[0][1], "phone":data[0][2],"email":data[0][3]})
    await enter_profile_mode(message, state)
   
# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(F.text == "üë§–ò–º—è")
async def set_first_name(message: types.Message, state: FSMContext):
    await state.set_state(Profile.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Profile.first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer(f"–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {message.text}", reply_markup=set_user_data_kb)
    await enter_profile_mode(message, state)

@dp.message(F.text == "üë•–§–∞–º–∏–ª–∏—è")
async def set_second_name(message: types.Message, state: FSMContext):
    await state.set_state(Profile.second_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Profile.second_name)
async def process_second_name(message: types.Message, state: FSMContext):
    await state.update_data(second_name=message.text)
    await message.answer(f"–§–∞–º–∏–ª–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}", reply_markup=set_user_data_kb)
    await enter_profile_mode(message, state)

@dp.message(F.text == "üìßEmail")
async def set_email(message: types.Message, state: FSMContext):
    await state.set_state(Profile.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Profile.email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer(f"Email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=set_user_data_kb)
    await enter_profile_mode(message, state)

@dp.message(F.text == "üìû–¢–µ–ª–µ—Ñ–æ–Ω")
async def set_phone(message: types.Message, state: FSMContext):
    await state.set_state(Profile.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Profile.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=set_user_data_kb)
    await enter_profile_mode(message, state)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(F.text == "‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def save_profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    set_user_data(
        first_name=data.get('first_name'),
        second_name=data.get('second_name'),
        email=data.get('email'),
        phone=data.get('phone'),
        tg_id = message.from_user.id
    )
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=set_user_data_kb)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def reset_profile(message: types.Message, state: FSMContext):
    await state.set_data({})  # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=set_user_data_kb)

#######################################################################

@dp.message(F.text == "üï∂–û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(viewing_ad=0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(author = '–Ω–µ —É–∫–∞–∑–∞–Ω')
    await state.update_data(only_saved = False)
    # await state.update_data(ad_id = None)
    await state.update_data(saved_ads = get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

async def check_ad_filters(ad: tuple, filters: dict, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ad[3] - –∫–∞—Ç–µ–≥–æ—Ä–∏—è, ad[4] - –≥–æ—Ä–æ–¥, ad[5] - —Ü–µ–Ω–∞)
    ad_id = ad[0]
    ad_author = ad[1]
    ad_category = ad[4]
    ad_city = ad[5]
    ad_price = ad[6]

    data = await state.get_data()
    liked_list = data.get("saved_ads")
    only_saved = data.get("only_saved")
    print((ad_id,),"__________________________", only_saved, "|",liked_list)

    # liked = False

    # if ((ad[0],)) in liked_list:
    #     liked = True

    if only_saved and (ad[0],) not in liked_list:
        return False
        
    if 'author' in filters and filters['author'] !='–Ω–µ —É–∫–∞–∑–∞–Ω'and ad_author != filters['author']:
        return False
    if 'category' in filters and filters['category'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_category != filters['category']:
        return False
    if 'city' in filters and filters['city'] != '–Ω–µ —É–∫–∞–∑–∞–Ω' and ad_city != filters['city']:
        return False
    if 'price_min' in filters and filters['price_min'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_price < int(filters['price_min']):
        return False
    if 'price_max' in filters and filters['price_max'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_price > int(filters['price_max']):
        return False

    
    return True

async def find_next_filtered_ad(current_index: int, filters: dict, state: FSMContext, forward: bool = True) -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    step = 1 if forward else -1
    checked = 0  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    
    total_ads = len(ads)
    
    if total_ads == 0:
        return -1  # –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π

    while checked < len(ads):
        current_index = (current_index + step) % len(ads)
        if current_index < 0:
            current_index = len(ads) - 1
        
        if await check_ad_filters(ads[current_index], filters, state):
            return current_index
        
        checked += 1
    
    return current_index  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å

async def display_current_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author':data.get('author','–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
    if not await check_ad_filters(ads[current_index], filters, state):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
        current_index = await find_next_filtered_ad(current_index, filters, state, forward=True)
        await state.update_data(viewing_ad=current_index)
    
    ad = ads[current_index]

    liked = False
    liked_list = data.get("saved_ads")
    if ((ad[0],)) in liked_list:
        liked = True
    # print(liked_list)
    # print (liked)

    ad_text = (f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {ad[4]}\n"
               f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {ad[5]}\n"
               f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {ad[2]}\n"
               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {ad[3]}\n"
               f"<b>–¶–µ–Ω–∞</b>: {ad[6]}‚ÇΩ")
    await message.answer(ad_text, reply_markup=ads_kb_if_saved if liked else ads_kb_if_not_saved)


    print(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads)}")
    print(f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current_index}")
    print(f"–§–∏–ª—å—Ç—Ä—ã: {filters}")
    print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {current_index}: {ads[current_index]}")
    print(f"–ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä—ã: {await check_ad_filters(ads[current_index], filters, state)}")

@dp.message(F.text == "–í–ø–µ—Ä–µ–¥‚û°Ô∏è", ViewingAds.viewing_ad)
async def next_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
    new_index = await find_next_filtered_ad(current_index, filters, state, forward=True)
    
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

@dp.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", ViewingAds.viewing_ad)
async def prev_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    
    # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
    new_index = await find_next_filtered_ad(current_index, filters, state, forward=False)
    
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

async def show_filters(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
    f"–§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    f"–ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    f"–¶–µ–Ω–∞ –æ—Ç: {data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    f"–¶–µ–Ω–∞ –¥–æ: {data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",reply_markup=filter_kb
    )

async def enter_filter_mode(message: Message, state: FSMContext):
    # (1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ViewingAds.filters)
    await show_filters(message, state)

@dp.message(F.text == "‚öôÔ∏è–§–∏–ª—å—Ç—Ä—ã")
async def filters_command(message: Message, state: FSMContext):
    await enter_filter_mode(message, state)
   
# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.message(F.text == "üìÅ–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
async def set_category(message: types.Message, state: FSMContext):

    await state.set_state(ViewingAds.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    # await state.reset_state(with_data=False)

    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}", reply_markup=filter_kb)
    await enter_filter_mode(message, state)

@dp.message(F.text == "üèôÔ∏è–ì–æ—Ä–æ–¥")
async def set_city(message: types.Message, state: FSMContext):
    
    await state.set_state(ViewingAds.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    # await state.reset_state(with_data=False)
    await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=filter_kb)
    await enter_filter_mode(message, state)

@dp.message(F.text == "üí∞–¶–µ–Ω–∞ –æ—Ç")
async def set_price_min(message: types.Message, state: FSMContext):
    
    await state.set_state(ViewingAds.price_min)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.price_min)
async def process_price_min(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_min=price)
        # await state.reset_state(with_data=False)
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

@dp.message(F.text == "üí∞–¶–µ–Ω–∞ –¥–æ")
async def set_price_max(message: types.Message, state: FSMContext):
    
    await state.set_state(ViewingAds.price_max)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.price_max)
async def process_price_max(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_max=price)
        # await state.reset_state(with_data=False)
        await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

@dp.message(F.text == "‚ù§Ô∏è–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
async def del_from_saved(message: Message, state: FSMContext):
    data = await state.get_data()
    ad = ads[data["viewing_ad"]]

    remove_ad_from_saved(ad[0], get_user_id_by_tg_id(message.from_user.id))
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", reply_markup=ads_kb_if_not_saved)
    await message.delete()
    await state.update_data(saved_ads = get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
    # await display_current_ad(message, state)

@dp.message(F.text == "‚ô°–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def del_from_saved(message: Message, state: FSMContext):
    data = await state.get_data()
    ad = ads[data["viewing_ad"]]
    add_ad_in_saved(ad[0], get_user_id_by_tg_id(message.from_user.id))
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", reply_markup=ads_kb_if_saved)
    await message.delete()
    await state.update_data(saved_ads = get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
    # await display_current_ad(message, state)

@dp.message(F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def finish_filters(message: types.Message, state: FSMContext):

    data = await state.get_data()
    await state.set_data({"viewing_ad": data.get("viewing_ad")})

    await show_filters(message, state)

@dp.message(F.text == "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    # await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(viewing_ad=0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(saved_ads = get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
    await state.update_data(author = get_user_id_by_tg_id(message.from_user.id))
    await state.update_data(only_saved = False)
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æW–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

@dp.message(F.text == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    # await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(viewing_ad=0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(saved_ads = get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
    await state.update_data(only_saved = True)
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

@dp.message(F.text == "‚úîÔ∏è–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ads(message: Message, state: FSMContext):
    
    await state.clear()
    await state.set_state(NewAds)

    await message.reply("1) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.title)

@dp.message(NewAds.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("2) –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.description)

@dp.message(NewAds.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("3) –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.category)

@dp.message(NewAds.category)
async def process_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.reply("4) –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>")
    await state.set_state(NewAds.location)

@dp.message(NewAds.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.reply("5) –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")
    await state.set_state(NewAds.money)

@dp.message(NewAds.money)
async def process_money(message: Message, state: FSMContext):
    await state.update_data(money=message.text)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    data = await state.get_data()
    ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
                f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
                f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
                f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
    await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, 
                        reply_markup=confirm_kb)
    await state.set_state(NewAds.confirm)
    
@dp.message(NewAds.confirm)
async def message_okey(message: Message, state: FSMContext):
    if message.text == "‚úÖ–†–∞–∑–º–µ—Å—Ç–∏—Ç—å":
        data = await state.get_data()
        tg_id = message.from_user.id
        category = data["category"]
        location = data["location"]
        title = data["title"]
        description = data["description"]
        money = data["money"]

        user_id = get_user_id_by_tg_id(tg_id)
        category_id = get_category_id(category)
        location_id = get_location_id(location)
        
        insert_new_ad(user_id, category_id, location_id, title, description, money)
        
        await message.reply("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ")
        await state.clear()
        await handle_menu_command(message, state)
        global ads
        ads = get_ads()
    elif message.text == "‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await state.set_state(NewAds.change)
        await message.answer("–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=red_kb)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        data = await state.get_data()
        ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
                   f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
                   f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
                   f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, 
                           reply_markup=confirm_kb)

@dp.message(NewAds.change)
async def select_field_to_edit(message: Message, state: FSMContext):
    field_map = {
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫": "title",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ì–æ—Ä–æ–¥": "location",
        "–¶–µ–Ω–∞": "money",
        "–ù–∞–∑–∞–¥": "back"
    }
    
    choice = message.text
    if choice not in field_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞", 
                            reply_markup=red_kb)
        return
    
    if choice == "–ù–∞–∑–∞–¥":
        await state.set_state(NewAds.confirm)
        data = await state.get_data()
        ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
                   f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
                   f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
                   f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, reply_markup=confirm_kb)
        return
    
    field_name = field_map[choice]
    await state.update_data(editing_field=field_name)
    
    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        "category": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "location": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>:",
        "money": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
    }
    
    await message.answer(prompts[field_name], reply_markup=back_kb)
    await state.set_state(NewAds.editing_field)

@dp.message(NewAds.editing_field)
async def process_field_edit(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await state.set_state(NewAds.change)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=red_kb)
        return
    
    data = await state.get_data()
    field_name = data.get("editing_field")
    
    if not field_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        await state.set_state(NewAds.change)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data({field_name: message.text})
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ editing_field
    current_data = await state.get_data()
    if "editing_field" in current_data:
        new_data = current_data.copy()
        del new_data["editing_field"]
        await state.set_data(new_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(NewAds.confirm)
    data = await state.get_data()
    ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
               f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
               f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
               f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, 
                        reply_markup=confirm_kb)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
close_connection()