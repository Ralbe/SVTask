import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram import BaseMiddleware

from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from utils.stateform import NewAds, CheckMessage, ViewingAdsStates
from DataBase.UserDB import add_category, get_ads, insert_new_ad, get_category_id, get_location_id, close_connection, get_user_id_by_tg_id, add_user_by_tg_id
from keyboards.keyboards import main_kb, ads_kb, confirm_kb, red_kb, reg_kb, back_kb, filter_kb
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# API_TOKEN = '7754829803:AAF9bmNcb635GC0emlEjkd3x8_YI75IJYz4' # main
API_TOKEN = '7588331682:AAHWaQdhjofYczgtFvFj3-EPYBzxR6dCKUY' # test
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

ads = get_ads()

# print(ads)
# current_ad_index = 0

# bot_restarted = True

# class ResetStateMiddleware(BaseMiddleware):
#     async def __call__(self, handler, event: Message, data: dict):
#         global bot_restarted

#         if bot_restarted:
#             state: FSMContext = data.get("state")
#             if state:
#                 await state.clear()
#             bot_restarted = False
#         return await handler(event, data)

# dp.message.middleware(ResetStateMiddleware())


@dp.message(Command("start"))
async def handle_menu_command(message: Message, state: FSMContext):
    await state.clear()
    get_user_id_by_tg_id(message.from_user.id) #–µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=reg_kb) 


@dp.message(F.text == "üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def handle_main_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª.", reply_markup=main_kb)


@dp.message(F.text == "üï∂–û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=ads_kb)
    await state.update_data(viewing_ad=0)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    await state.set_state(ViewingAdsStates.viewing_ad)
    await display_current_ad(message, state)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

async def display_current_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if current_index >= len(ads):
        current_index = 0
        await state.update_data(viewing_ad=0)
    elif current_index < 0:
        current_index = len(ads) - 1
        await state.update_data(viewing_ad=len(ads) - 1)
    
    ad = ads[current_index]
    ad_text = (f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {ad[3]}\n"
               f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {ad[4]}\n"
               f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {ad[1]}\n"
               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {ad[2]}\n"
               f"<b>–¶–µ–Ω–∞</b>: {ad[5]}‚ÇΩ")
    await message.answer(ad_text, reply_markup=ads_kb)

@dp.message(F.text == "–í–ø–µ—Ä–µ–¥‚û°Ô∏è", ViewingAdsStates.viewing_ad)
async def next_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    
    new_index = current_index + 1
    if new_index >= len(ads):
        new_index = 0
    
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

@dp.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", ViewingAdsStates.viewing_ad)
async def prev_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    
    new_index = current_index - 1
    if new_index < 0:
        new_index = len(ads) - 1
    
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

# @dp.message(F.text == "‚öôÔ∏è–§–∏–ª—å—Ç—Ä—ã")
# async def filters_command(message: types.Message, state: FSMContext):
#     # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞
#     await state.update_data(
#         category=None,
#         city=None,
#         price_min=None,
#         price_max=None
#     )
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     await message.answer(
#         "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:",
#         reply_markup=filter_kb
#     )

# # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
# @dp.message(F.text == "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è")
# async def set_category(message: types.Message):
#     await ViewingAdsStates.waiting_for_category.set()
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=types.ReplyKeyboardRemove())

# @dp.message(ViewingAdsStates.waiting_for_category)
# async def process_category(message: types.Message, state: FSMContext):
#     await state.update_data(category=message.text)
#     await state.reset_state(with_data=False)
#     await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}", reply_markup=filter_kb)

# @dp.message(F.text == "üèôÔ∏è –ì–æ—Ä–æ–¥")
# async def set_city(message: types.Message):
#     await ViewingAdsStates.waiting_for_city.set()
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())

# @dp.message(ViewingAdsStates.waiting_for_city)
# async def process_city(message: types.Message, state: FSMContext):
#     await state.update_data(city=message.text)
#     await state.reset_state(with_data=False)
#     await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=filter_kb)

# @dp.message(F.text == "üí∞ –¶–µ–Ω–∞ –æ—Ç")
# async def set_price_min(message: types.Message):
#     await ViewingAdsStates.waiting_for_price_min.set()
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

# @dp.message(ViewingAdsStates.waiting_for_price_min)
# async def process_price_min(message: types.Message, state: FSMContext):
#     try:
#         price = int(message.text)
#         await state.update_data(price_min=price)
#         await state.reset_state(with_data=False)
#         await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
#     except ValueError:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# @dp.message(F.text == "üí∞ –¶–µ–Ω–∞ –¥–æ")
# async def set_price_max(message: types.Message):
#     await ViewingAdsStates.waiting_for_price_max.set()
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

# @dp.message(ViewingAdsStates.waiting_for_price_max)
# async def process_price_max(message: types.Message, state: FSMContext):
#     try:
#         price = int(message.text)
#         await state.update_data(price_max=price)
#         await state.reset_state(with_data=False)
#         await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
#     except ValueError:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
# @dp.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
# async def finish_filters(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     await message.answer(
#         f"–§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
#         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
#         f"–ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
#         f"–¶–µ–Ω–∞ –æ—Ç: {data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
#         f"–¶–µ–Ω–∞ –¥–æ: {data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
#         reply_markup=types.ReplyKeyboardRemove()
#     )
#     await state.finish()


@dp.message(F.text == "‚úîÔ∏è–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ads(message: Message, state: FSMContext):

    await state.clear()
    await state.set_state(NewAds)

    await message.reply("1) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.title)


@dp.message(NewAds.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("2) –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.description)


@dp.message(NewAds.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("3) –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.category)


@dp.message(NewAds.category)
async def process_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.reply("4) –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>")
    await state.set_state(NewAds.location)


@dp.message(NewAds.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.reply("5) –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")
    await state.set_state(NewAds.money)


@dp.message(NewAds.money)
async def process_money(message: Message, state: FSMContext):
    await state.update_data(money=message.text)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    data = await state.get_data()
    ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
                f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
                f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
                f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
    await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, 
                        reply_markup=confirm_kb)
    await state.set_state(NewAds.waiting_for_confirm)
    

@dp.message(NewAds.waiting_for_confirm)
async def message_okey(message: Message, state: FSMContext):
    if message.text == "‚úÖ–†–∞–∑–º–µ—Å—Ç–∏—Ç—å":
        data = await state.get_data()
        tg_id = message.from_user.id
        category = data["category"]
        location = data["location"]
        title = data["title"]
        description = data["description"]
        money = data["money"]

        user_id = get_user_id_by_tg_id(tg_id)
        category_id = get_category_id(category)
        location_id = get_location_id(location)
        
        insert_new_ad(user_id, category_id, location_id, title, description, money)
        
        await message.reply("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ")
        await state.clear()
        await handle_menu_command(message, state)
    elif message.text == "‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await state.set_state(NewAds.waiting_for_change)
        await message.answer("–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=red_kb)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        data = await state.get_data()
        ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
                   f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
                   f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
                   f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, 
                           reply_markup=confirm_kb)
        

@dp.message(NewAds.waiting_for_change)
async def select_field_to_edit(message: Message, state: FSMContext):
    field_map = {
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫": "title",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ì–æ—Ä–æ–¥": "location",
        "–¶–µ–Ω–∞": "money",
        "–ù–∞–∑–∞–¥": "back"
    }
    
    choice = message.text
    if choice not in field_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞", 
                            reply_markup=red_kb)
        return
    
    if choice == "–ù–∞–∑–∞–¥":
        await state.set_state(NewAds.waiting_for_confirm)
        data = await state.get_data()
        ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
                   f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
                   f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
                   f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, reply_markup=confirm_kb)
        return
    
    field_name = field_map[choice]
    await state.update_data(editing_field=field_name)
    
    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        "category": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "location": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>:",
        "money": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
    }
    
    await message.answer(prompts[field_name], reply_markup=back_kb)
    await state.set_state(NewAds.editing_field)

@dp.message(NewAds.editing_field)
async def process_field_edit(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await state.set_state(NewAds.waiting_for_change)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=red_kb)
        return
    
    data = await state.get_data()
    field_name = data.get("editing_field")
    
    if not field_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        await state.set_state(NewAds.waiting_for_change)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data({field_name: message.text})
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ editing_field
    current_data = await state.get_data()
    if "editing_field" in current_data:
        new_data = current_data.copy()
        del new_data["editing_field"]
        await state.set_data(new_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(NewAds.waiting_for_confirm)
    data = await state.get_data()
    ad_text = (f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
               f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
               f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
               f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ")
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, 
                        reply_markup=confirm_kb)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
close_connection()