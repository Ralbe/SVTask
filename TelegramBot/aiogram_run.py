import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InputMediaPhoto
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
import asyncio
from utils.stateform import NewAds, CheckMessage, ViewingAds, ProfileStates, Profile, NewVacancy, ViewingVacancies
from DataBase.UserDB import (
    add_category, get_ads, insert_new_ad, get_category_id, get_location_id, close_connection,
    get_user_id_by_tg_id, set_user_data, get_user_data, get_categories, get_saved_by_user,
    remove_ad_from_saved, add_ad_in_saved, add_location, increment_ad_views, get_statistic,
    get_contact_by_ad_id, update_ad, get_ad_by_id, get_user_ads, get_ad_photos, add_photo, delete_ad_photos,
    get_saved_vacancies, get_vacancies,increment_vacancy_views, get_vacancy_by_id, get_vacancy_statistics,
    get_user_vacancies,add_vacancy_to_saved, remove_vacancy_from_saved, insert_new_vacancy, 
    get_contact_by_user_id
)
from keyboards.keyboards import (
    main_kb, ads_kb_showed, ads_kb_hided, confirm_kb, red_kb, back_kb, filter_kb,
    set_user_data_kb, ads_ikb, category_kb, vacancy_edit_kb, vacancy_ikb, vacancy_kb_hided,
    vacancy_kb_showed
)
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from datetime import datetime
# from dotenv import load_dotenv
import os

# Load environment variables
# load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN") or '7588331682:AAHWaQdhjofYczgtFvFj3-EPYBzxR6dCKUY'  # Fallback for testing

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
categories = get_categories()
# print(categories, "@@@@@@@@@@@@@@@@@@@")
# for category in categories:
#         # keyboard.add(KeyboardButton(text=category[0]))
#         print(category[0],"\n")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

async def format_date(d: datetime) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 'D –º–µ—Å—è—Ü'."""
    # await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    return f"{d.day} {months[d.month]}"


# –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—è—Ö –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_FIELDS = {
    "üë§–ò–º—è": {
        "field_name": "firstname",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "validation": lambda x: (True, x) if x.strip() else (False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    },
    "üë•–§–∞–º–∏–ª–∏—è": {
        "field_name": "lastname",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        "validation": lambda x: (True, x) if x.strip() else (False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    },
    "üìßEmail": {
        "field_name": "email",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        "validation": lambda x: (
            (True, x) if "@" in x and "." in x.split("@")[-1] 
            else (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        )
    },
    "üìû–¢–µ–ª–µ—Ñ–æ–Ω": {
        "field_name": "phone",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º':",
        "keyboard": lambda: ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True
        ),
        "validation": lambda x: (
            (True, x) if x.replace("+", "").isdigit() 
            else (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        ),
        "process_contact": lambda contact: contact.phone_number
    }
}

@dp.message(Command("start"))
async def handle_menu_command(message: Message, state: FSMContext):
    await state.clear()
    try:
        get_user_id_by_tg_id(message.from_user.id)  
        data = get_user_data(message.from_user.id)
        await state.update_data({
            "firstname": data[0][0],
            "second_name": data[0][1],
            "phone": data[0][2],
            "email": data[0][3]
        })
        await enter_profile_mode(message, state)
    except Exception as e:
        logging.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(F.text == "üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def handle_main_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª.", reply_markup=main_kb)

#######################################################################
# Profile Management

@dp.message(F.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_data = get_user_data(message.from_user.id)
        
        if not db_data or not db_data[0]:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            await state.update_data({
                "firstname": "",
                "lastname": "",
                "phone": "",
                "email": ""
            })
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            await state.update_data({
                "firstname": db_data[0][0] or "",
                "lastname": db_data[0][1] or "",
                "phone": db_data[0][2] or "",
                "email": db_data[0][3] or ""
            })
        
        # –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        await enter_profile_mode(message, state)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb
        )
        await state.clear()

@dp.message(F.text.in_(PROFILE_FIELDS.keys()))
async def select_profile_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field_info = PROFILE_FIELDS[message.text]
    
    await state.set_state(ProfileStates.waiting_for_field)
    await state.update_data(
        editing_field=field_info["field_name"],
        field_config=message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥–∞
    )
    
    reply_markup = field_info.get("keyboard", lambda: ReplyKeyboardRemove())()
    await message.answer(field_info["prompt"], reply_markup=reply_markup)

@dp.message(ProfileStates.waiting_for_field, F.content_type.in_({"text", "contact"}))
async def process_profile_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_data = await state.get_data()
    field_config_key = user_data["field_config"]
    field_info = PROFILE_FIELDS[field_config_key]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–µ—Å–ª–∏ –ø–æ–ª–µ phone –∏ –ø—Ä–∏—Å–ª–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç)
    if message.contact and field_info["field_name"] == "phone":
        value = field_info["process_contact"](message.contact)
    else:
        value = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    is_valid, validated_value_or_error = field_info["validation"](value)
    
    if not is_valid:
        await message.answer(validated_value_or_error)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data({
        user_data["editing_field"]: validated_value_or_error,
        "editing_field": None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ
    })
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª—è
    await enter_profile_mode(message, state)

@dp.message(F.text == "‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def save_profile_handler(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î"""
    data = await state.get_data()
    print("\n\n\n",data.get("lastname"))
    try:
        set_user_data(
            firstname=data.get("firstname"),
            lastname=data.get("lastname"),
            email=data.get("email"),
            phone=data.get("phone"),
            tg_id=message.from_user.id
        )
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=set_user_data_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def reset_profile_handler(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.set_data({})
    await message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=set_user_data_kb)

async def enter_profile_mode(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    data = await state.get_data()
    
    profile_info = (
        "‚öôÔ∏è <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('firstname', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë• <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('lastname', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìß <b>Email:</b> {data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await message.answer(text=profile_info, reply_markup=set_user_data_kb)
    await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

#######################################################################
# Ad Browsing and Filtering

@dp.message(F.text == "üï∂–û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    await state.update_data(
        viewing_ad=0,
        author='–Ω–µ —É–∫–∞–∑–∞–Ω',
        only_saved=False,
        saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)),
        ad_msg_id =0,
        stat_msg_id = 0,
        showed_kb = True,
        user_id = get_user_id_by_tg_id(message.from_user.id)
    )

    data = await state.get_data()
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': get_user_id_by_tg_id(message.from_user.id)
    }
    new_index = await find_next_filtered_ad(0, filters, state, forward=True)
    await state.update_data(viewing_ad=new_index)
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)


async def check_ad_filters(ad: tuple, filters: dict, state: FSMContext) -> bool:
    ad_id, ad_author, _, _, ad_category, ad_city, ad_price, ad_create_date = ad
    data = await state.get_data()
    liked_list = data.get("saved_ads", [])
    only_saved = data.get("only_saved", False)

    if only_saved and (ad_id,) not in liked_list:
        return False
    if filters != None:
        if filters['author'] != '–Ω–µ —É–∫–∞–∑–∞–Ω' and ad_author != filters['author']:
            return False
        if filters['category'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_category != filters['category']:
            return False
        if filters['city'] != '–Ω–µ —É–∫–∞–∑–∞–Ω' and ad_city != filters['city']:
            return False
        if filters['price_min'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_price < int(filters['price_min']):
            return False
        if filters['price_max'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_price > int(filters['price_max']):
            return False
    return True

async def find_next_filtered_ad(current_index: int, filters: dict, state: FSMContext, forward: bool = True) -> int:
    ads = get_ads()
    if not ads:
        return -1
    step = 1 if forward else -1
    checked = 0
    total_ads = len(ads)
    while checked < total_ads:
        current_index = (current_index + step) % total_ads
        if current_index < 0:
            current_index = total_ads - 1
        if await check_ad_filters(ads[current_index], filters, state):
            return current_index
        checked += 1
    return current_index

async def display_current_ad(message: Message, state: FSMContext):
    print()
    try:
        ads = get_ads()
    except Exception as e:
        logging.error(f"Failed to fetch ads: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    ad = ads[current_index]
    ad_id = ad[0]
    await state.update_data({"ad_id":ad_id})
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    photos = get_ad_photos(ad_id)
    
    ad_text = (
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {ad[2]}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {ad[3]}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {ad[4]}\n"
        # f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {ad[5]}\n"
        f"<b>–¶–µ–Ω–∞</b>: {ad[6]}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º
    user_id = data.get('user_id')
    user_ads = get_user_ads(user_id) or []
    your_ad = (ad_id,) in user_ads
    
    if not your_ad:
        increment_ad_views(ad_id)

    liked_ad = (ad_id,) in data.get("saved_ads", [])
    
    stats = get_statistic(ad_id)
    if stats is None:
        stats = (0, 0)  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if stats[1] == None:
        stats = (stats[0], 0)

    print("________________________")
    print(ad[0])
    print(ad[1])
    print(ad[2])
    print(ad[3])
    print(ad[4])
    print(ad[5])
    print(ad[6])
    print(ad[7])
    print(stats[0])
    print(stats[1])
    print("________________________")

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>:\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {await format_date(ad[7])}\n"
        f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats[0]} | ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {stats[1]}"
    )
    





    # try:
        # if photos:
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        #     media = [InputMediaPhoto(media=photos[0], caption=ad_text)]
        #     # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        #     media.extend([InputMediaPhoto(media=photo) for photo in photos[1:]])
            
        #     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        #     if data.get("ad_msg_id"):
        #         await bot.delete_message(chat_id=message.chat.id, message_id=data.get("ad_msg_id"))
        #     if data.get("photo_group_id"):
        #         await bot.delete_message(chat_id=message.chat.id, message_id=data.get("photo_group_id"))
        #     if data.get("stat_msg_id"):
        #         await bot.delete_message(chat_id=message.chat.id, message_id=data.get("stat_msg_id"))
            
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
        #     sent_messages = await bot.send_media_group(chat_id=message.chat.id, media=media)
        #     photo_group_id = sent_messages[0].message_id
            
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–Ω–æ–ø–∫–∏
        #     stat_msg = await message.answer(stats_text, reply_markup=ads_kb_showed if data.get("showed_kb") else ads_kb_hided)
        #     buttons_msg = await message.answer("–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=ads_ikb(liked_ad, your_ad))
            
        #     await state.update_data(
        #         photo_group_id=photo_group_id,
        #         stat_msg_id=stat_msg.message_id,
        #         ad_msg_id=buttons_msg.message_id
        #     )
        # else:
        #     # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–µ–∑ —Ñ–æ—Ç–æ
        #     await bot.edit_message_text(text=stats_text, chat_id=message.chat.id, 
        #                               message_id=data.get("stat_msg_id"),
        #                               reply_markup=ads_kb_showed if data.get("showed_kb") else ads_kb_hided)
        #     await bot.edit_message_text(text=ad_text, chat_id=message.chat.id, 
        #                               message_id=data.get("ad_msg_id"),
        #                               reply_markup=ads_ikb(liked_ad, your_ad))
    # except Exception as e:
        # logging.error(f"Failed to change ad text: {e}")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if data.get("ad_msg_id"):
        await bot.delete_message(chat_id=message.chat.id, message_id=data.get("ad_msg_id"))
    if data.get("stat_msg_id"):
        await bot.delete_message(chat_id=message.chat.id, message_id=data.get("stat_msg_id"))
    if data.get("photo_group_id"):
        await bot.delete_message(chat_id=message.chat.id, message_id=data.get("photo_group_id"))
    
    if photos:
        media = [InputMediaPhoto(media=photos[0], caption=ad_text)]
        media.extend([InputMediaPhoto(media=photo) for photo in photos[1:]])
        sent_messages = await bot.send_media_group(chat_id=message.chat.id, media=media)
        photo_group_id = sent_messages[0].message_id
        buttons_msg = await message.answer("–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=ads_ikb(liked_ad, your_ad))
        stat_msg = await message.answer(stats_text, reply_markup=ads_kb_showed if data.get("showed_kb") else ads_kb_hided)
        
        await state.update_data(
            photo_group_id=photo_group_id,
            stat_msg_id=stat_msg.message_id,
            ad_msg_id=buttons_msg.message_id
        )
    else:
        ad_msg = await message.answer(ad_text, reply_markup=ads_ikb(liked_ad, your_ad))    
        stat_msg = await message.answer(stats_text, reply_markup=ads_kb_showed if data.get("showed_kb") else ads_kb_hided)
        await state.update_data(
            ad_msg_id=ad_msg.message_id, 
            stat_msg_id=stat_msg.message_id,
            photo_group_id=None
        )

@dp.message(NewAds.change, F.text == "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def edit_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    
    if not photos:
        text = "–£ —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?"
    else:
        text = f"–°–µ–π—á–∞—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    
    await message.answer(text, 
                       reply_markup=ReplyKeyboardMarkup(
                           keyboard=[
                               [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ")],
                               [KeyboardButton(text="‚ùå–ù–∞–∑–∞–¥")]
                           ],
                           resize_keyboard=True
                       ))
    await state.set_state(NewAds.edit_photos)

@dp.message(NewAds.edit_photos, F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
async def add_more_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    current_count = len(data.get("photos", []))
    remaining = 10 - current_count
    
    if remaining <= 0:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–æ—Ç–æ. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.")
        return
    
    await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ {remaining} —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'", 
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
                            resize_keyboard=True
                        ))
    await state.set_state(NewAds.add_more_photos)

@dp.message(NewAds.add_more_photos, F.photo)
async def process_additional_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    
    if len(photos) >= 10:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - 10. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    
    largest_photo = message.photo[-1]
    photos.append(largest_photo.file_id)
    
    await state.update_data(photos=photos)
    remaining = 10 - len(photos)
    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

@dp.message(NewAds.add_more_photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_additional_photos(message: Message, state: FSMContext):
    await show_ad_preview(message, state)

@dp.message(NewAds.edit_photos, F.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ")
async def remove_all_photos(message: Message, state: FSMContext):
    await state.update_data(photos=[])
    await message.answer("–í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=red_kb)
    await state.set_state(NewAds.change)

@dp.callback_query(F.data == "next_ad")
async def next_ad(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    new_index = await find_next_filtered_ad(current_index, filters, state, forward=True)
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(callback.message, state)
    # await callback.message.delete()
    # await bot.delete_message(chat_id=callback.message.chat.id,
    #                     message_id=callback.message.message_id+1)
    
    # await state.update_data(ad_msg_id = callback.message.message_id, stat_msg_id = callback.message.message_id+1)

@dp.callback_query(F.data == "prev_ad")
async def prev_ad(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    new_index = await find_next_filtered_ad(current_index, filters, state, forward=False)
    await state.update_data(viewing_ad=new_index)
    # await callback.message.delete()
    # await bot.delete_message(chat_id=callback.message.chat.id,
    #                     message_id=callback.message.message_id+1)

    # await state.update_data(ad_msg_id = callback.message.message_id, stat_msg_id = callback.message.message_id+1)
    await display_current_ad(callback.message, state)

@dp.callback_query(F.data == "get_contact")
async def get_contact(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    ad_id = data.get("ad_id")
    author_data = get_contact_by_ad_id(ad_id)

    # print("\n\n\n",ad_id)
    # print(author_data, "\n\n\n")
    try:
        author_name = author_data[0][0]
        author_nickname = author_data[0][1]
        author_tg_id = author_data[0][2]
        author_phone = author_data[0][3]

    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    if author_tg_id != None:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {f'[{author_nickname}({author_name})](tg://user?id={author_tg_id})'}",
            parse_mode="MarkdownV2"
            )
    else:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {author_phone} - {author_name}"
            )
    # await callback.message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {f'[{author_name}](tg://user?id={author_tg_id} )'}")

@dp.callback_query(F.data == "change_ad")
async def change_ad(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    ad_id = data.get("ad_id")
    ad_data = get_ad_by_id(ad_id)[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    photos = get_ad_photos(ad_id)
    
    await state.update_data({
        "ad_id": ad_data[0],
        "title": ad_data[1],
        "description": ad_data[2],
        "category": ad_data[3],
        "money": ad_data[5],
        "photos": photos,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ
        "changing_ad": True
    })
    
    await show_ad_preview(callback.message, state)
    await state.set_state(NewAds.confirm)

async def show_filters(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"–§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞ –æ—Ç: {data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–¶–µ–Ω–∞ –¥–æ: {data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
        reply_markup=filter_kb
    )

async def enter_filter_mode(message: Message, state: FSMContext):
    await state.set_state(ViewingAds.filters)
    await show_filters(message, state)

@dp.message(F.text == "‚öôÔ∏è–§–∏–ª—å—Ç—Ä—ã")
async def filters_command(message: Message, state: FSMContext):
    await enter_filter_mode(message, state)

@dp.message(F.text == "üìÅ–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
async def set_category(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=await category_kb(categories))

@dp.message(ViewingAds.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text == "‚ùå–ù–∞–∑–∞–¥":
        await enter_filter_mode(message, state)
    else:
        await state.update_data(category=message.text)
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}", reply_markup=filter_kb)
        await enter_filter_mode(message, state)

# @dp.message(F.text == "üèôÔ∏è–ì–æ—Ä–æ–¥")
# async def set_city(message: types.Message, state: FSMContext):
#     await state.set_state(ViewingAds.city)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())

# @dp.message(ViewingAds.city)
# async def process_city(message: types.Message, state: FSMContext):
#     await state.update_data(city=message.text)
#     await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=filter_kb)
#     await enter_filter_mode(message, state)

@dp.message(F.text == "üí∞–¶–µ–Ω–∞ –æ—Ç")
async def set_price_min(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.price_min)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.price_min)
async def process_price_min(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_min=price)
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

@dp.message(F.text == "üí∞–¶–µ–Ω–∞ –¥–æ")
async def set_price_max(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.price_max)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.price_max)
async def process_price_max(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_max=price)
        await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

@dp.callback_query(F.data.in_(["remove_from_saved", "add_in_saved"]))
async def handle_saved_actions(callback: CallbackQuery, state: FSMContext):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_id = get_user_id_by_tg_id(callback.from_user.id)
        if not user_id:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        data = await state.get_data()
        ad_id = data.get("ad_id")
        if not ad_id:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if callback.data == "remove_from_saved":
            remove_ad_from_saved(ad_id, user_id)

            liked_ad = False
        else:
            add_ad_in_saved(ad_id, user_id)
            liked_ad = True

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            saved_ads = get_saved_by_user(user_id) or []
            await state.update_data(saved_ads=saved_ads)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        your_ad = (ad_id,) in (get_user_ads(user_id) or [])
        try:
            stats = get_statistic((ad_id))
            data = await state.get_data()
            ad = get_ad_by_id(ad_id)
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>:\n"
                f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {await format_date(ad[6])}\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats[0]}\n"
                f"‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {stats[1]}\n"
                # f"üìû –ó–∞–ø—Ä–æ—Å—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {stats[2]}"
    )
            # await bot.edit_message_text(text = stats_text, chat_id=callback.message.chat.id, message_id = callback.message.message_id+1,
            #                             reply_markup = ads_kb_showed if data.get("showed_kb") else ads_kb_hided)
            # await bot.edit_message_reply_markup(message_id=callback.message.message_id+1, reply_markup = ads_kb_showed if data.get("showed_kb") else ads_kb_hided)
            await callback.message.edit_reply_markup(
                reply_markup=ads_ikb(liked_ad, your_ad)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            # await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        await display_current_ad(callback.message, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@dp.message(F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def finish_filters(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.set_data({
        "viewing_ad": data.get("viewing_ad", 0),
        "saved_ads": data.get("saved_ads", []),
        "only_saved": False,
        "author": "–Ω–µ —É–∫–∞–∑–∞–Ω"
    })
    await show_filters(message, state)

@dp.message(F.text == "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_own_ads(message: Message, state: FSMContext):
    await state.update_data(
        viewing_ad=0,
        saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)),
        author=get_user_id_by_tg_id(message.from_user.id),
        only_saved=False
    )
    await state.set_state(ViewingAds.viewing_ad)
    data = await state.get_data()
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': get_user_id_by_tg_id(message.from_user.id)
    }

    print()
    new_index = await find_next_filtered_ad(0, filters, state, forward=True)
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

@dp.message(F.text == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_saved_ads(message: Message, state: FSMContext):
    await state.update_data(
        viewing_ad=0,
        saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)),
        only_saved=True,
        author="–Ω–µ —É–∫–∞–∑–∞–Ω"
    )
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)

#######################################################################
# Ad Creation

@dp.message(F.text == "‚úîÔ∏è–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ads(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(NewAds.title)
    await state.update_data({"changing_ad":False})
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

@dp.message(NewAds.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.description)

@dp.message(NewAds.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=await category_kb(categories))
    await state.set_state(NewAds.category)

@dp.message(NewAds.category)
async def process_category(message: Message, state: FSMContext):
    # if (message.text,) in categories:
    #     await state.update_data(category=message.text)
    #     await message.reply("4) –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>")
    #     await state.set_state(NewAds.location)
    if (message.text,) in categories:
        await state.update_data(category=message.text)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        await state.set_state(NewAds.money)
    elif message.text == "‚ùå–ù–∞–∑–∞–¥":
        await show_ads(message, state)
    else:
        await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=await category_kb(categories))
        await state.set_state(NewAds.category)
    

# @dp.message(NewAds.location)
# async def process_location(message: Message, state: FSMContext):
#     await state.update_data(location=message.text)
#     await message.reply("5) –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")
#     await state.set_state(NewAds.money)

@dp.message(NewAds.money)
async def process_money(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(money=price)
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 10 —à—Ç—É–∫). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'", 
                           reply_markup=ReplyKeyboardMarkup(
                               keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
                               resize_keyboard=True
                           ))
        await state.update_data(photos=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
        await state.set_state(NewAds.photos)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(NewAds.photos, F.photo)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    
    if len(photos) >= 10:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - 10. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    largest_photo = message.photo[-1]
    photos.append(largest_photo.file_id)
    
    await state.update_data(photos=photos)
    remaining = 10 - len(photos)
    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

@dp.message(NewAds.photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    
    if not photos:
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.", 
                        #    reply_markup=ReplyKeyboardMarkup(
                        #        keyboard=[
                        #            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")]
                        #        ],
                        #        resize_keyboard=True)
                           )
        # return
    
    await show_ad_preview(message, state)

async def show_ad_preview(message: Message, state: FSMContext):
    data = await state.get_data()
    ad_text = (
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
        f"<b>–¶–µ–Ω–∞</b>: {data['money']}"
    )
    
    photos = data.get("photos", [])
    
    if photos:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        media = [InputMediaPhoto(media=photos[0], caption=ad_text)]
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        media.extend([InputMediaPhoto(media=photo) for photo in photos[1:]])
        
        await message.answer_media_group(media=media)
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:", reply_markup=confirm_kb)
    else:
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, reply_markup=confirm_kb)
    
    await state.set_state(NewAds.confirm)

@dp.message(NewAds.confirm)
async def message_okey(message: Message, state: FSMContext):
    if message.text == "‚úÖ–†–∞–∑–º–µ—Å—Ç–∏—Ç—å":
        # try:
            data = await state.get_data()
            tg_id = message.from_user.id
            category = data["category"]
            title = data["title"]
            description = data["description"]
            money = data["money"]
            photos = data.get("photos", [])

            user_id = get_user_id_by_tg_id(tg_id)
            category_id = get_category_id(category)
            if not category_id:
                category_id = add_category(category)

            if data["changing_ad"]:
                ad_id = data["ad_id"]
                update_ad(ad_id, user_id, category_id, title, description, money)
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ
                delete_ad_photos(ad_id)
            else:
                ad_id = insert_new_ad(user_id, category_id, title, description, money)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ
            for photo in photos:
                try:
                    add_photo(ad_id, photo)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
                    continue

            await message.reply("‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ", reply_markup=main_kb)
            await state.clear()
            await handle_main_text(message, state)
        # except Exception as e:
            # logging.error(f"Error publishing ad: {e}")
            # await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(NewAds.change)
async def select_field_to_edit(message: Message, state: FSMContext):
    field_map = {
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫": "title",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        # "–ì–æ—Ä–æ–¥": "location",
        "–¶–µ–Ω–∞": "money",
        "‚ùå–ù–∞–∑–∞–¥": "back"
    }
    choice = message.text
    if choice not in field_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=red_kb)
        return

    if choice == "‚ùå–ù–∞–∑–∞–¥":
        await state.set_state(NewAds.confirm)
        data = await state.get_data()
        ad_text = (
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
            # f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
            f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ"
        )
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, reply_markup=confirm_kb)
        return

    field_name = field_map[choice]
    await state.update_data(editing_field=field_name)
    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        "category": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        # "location": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>:",
        "money": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
    }
    await message.answer(prompts[field_name], reply_markup=back_kb if field_name != 'category' else await category_kb(categories))
    await state.set_state(NewAds.editing_field)

@dp.message(NewAds.editing_field)
async def process_field_edit(message: Message, state: FSMContext):
    if message.text.lower() == "‚ùå–ù–∞–∑–∞–¥":
        await state.set_state(NewAds.change)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=red_kb)
        return

    data = await state.get_data()
    field_name = data.get("editing_field")
    if not field_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        await state.set_state(NewAds.change)
        return

    if field_name == "money":
        try:
            price = int(message.text)
            await state.update_data({field_name: price})
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
    else:
        await state.update_data({field_name: message.text})

    current_data = await state.get_data()
    if "editing_field" in current_data:
        new_data = current_data.copy()
        del new_data["editing_field"]
        await state.set_data(new_data)

    await state.set_state(NewAds.confirm)
    data = await state.get_data()
    ad_text = (
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
        # f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
        f"<b>–¶–µ–Ω–∞</b>: {data['money']}"
    )
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, reply_markup=confirm_kb)

@dp.message(F.text == "‚¨ÜÔ∏è–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")
async def show_menu_kb(message: Message, state: FSMContext):
    await state.update_data(showed_kb = True)
    current_state = await state.get_state()
    if current_state == ViewingVacancies.viewing_vacancy:
        await message.answer("–ú–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ", reply_markup = vacancy_kb_showed)

    elif current_state == ViewingAds.viewing_ad:
    
        await message.answer("–ú–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ", reply_markup = ads_kb_showed)
    else:
        await handle_main_text(message, state)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.message(F.text == "‚¨áÔ∏è–°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def hide_menu_kb(message: Message, state: FSMContext):
    await state.update_data(showed_kb = False)
    current_state = await state.get_state()
    if current_state == ViewingVacancies.viewing_vacancy:
        await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ", reply_markup = vacancy_kb_hided)

    elif current_state == ViewingAds.viewing_ad:
    
        await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ", reply_markup = ads_kb_hided)
    else:
        await handle_main_text(message, state)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
#################################################

#  –í–ê–ö–ê–ù–°–ò–ò

################################################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π
@dp.message(F.text == "üëî–í–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(message: Message, state: FSMContext):
    await state.update_data(
        viewing_vacancy=0,
        saved_vacancies=get_saved_vacancies(get_user_id_by_tg_id(message.from_user.id)),
        only_saved=False,
        vacancy_filters={
            'salary_min': None,
            'salary_max': None,
            'user_id': get_user_id_by_tg_id(message.from_user.id)
        },
        author = '–Ω–µ —É–∫–∞–∑–∞–Ω'
    )
    await state.set_state(ViewingVacancies.viewing_vacancy)
    await display_current_vacancy(message, state)

async def display_current_vacancy(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        data = await state.get_data()
        vacancies = get_vacancies() or []  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        vacancy_filters = data.get('vacancy_filters', {
            'salary_min': None,
            'salary_max': None
        })
        
        saved_vacancies = data.get('saved_vacancies', [])
        print(saved_vacancies)
        only_saved = data.get('only_saved', False)
        current_index = max(0, min(data.get("viewing_vacancy", 0), len(vacancies) - 1))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π
        filtered_vacancies = []

        print(f"Filters: {vacancy_filters}")
        print(f"Only saved: {only_saved}")
        print(f"Saved vacancies: {saved_vacancies}")
        print(f"Total vacancies before filtering: {len(vacancies)}")
        for v in vacancies:
            print (v)
            try:

                salary_ok = (
                    (vacancy_filters.get('salary_min') is None or v[4] >= vacancy_filters['salary_min']) and
                    (vacancy_filters.get('salary_max') is None or v[4] <= vacancy_filters['salary_max'])
                )

                # if data['author'] != '–Ω–µ —É–∫–∞–∑–∞–Ω' and v[8] != data['author']:
                #     author_ok = True
                # else:
                #     author_ok = False
        
                # if only_saved:
                #     saved_ok = (v[0],) in saved_vacancies
                # else:
                #     saved_ok = True
                # saved_ok = not only_saved or (v[0],) in saved_vacancies



                # author_ok = vacancy_filters.get('user_id') is None or v[8] == vacancy_filters['user_id']

                # if salary_ok and saved_ok and author_ok:
                filtered_vacancies.append(v)
            except IndexError:
                continue
        
        if not filtered_vacancies:
            await message.answer("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º", 
                               reply_markup=vacancy_kb_showed)
            return
        
        current_index = min(current_index, len(filtered_vacancies) - 1)
        vacancy = filtered_vacancies[current_index]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–∏
        if len(vacancy) < 9:
            await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏")
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        increment_vacancy_views(vacancy[0])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        user_id = get_user_id_by_tg_id(message.from_user.id)
        user_vacancies = get_user_vacancies(user_id) or []
        is_owner = (vacancy[0],) in user_vacancies
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ—Å—Ç–∏
        is_saved = (vacancy[0],) in saved_vacancies
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = get_vacancy_statistics(vacancy[0]) or (0, 0)  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        vacancy_text = (
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {vacancy[2]}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {vacancy[3]}\n"
            f"<b>–ó–∞—Ä–ø–ª–∞—Ç–∞</b>: {vacancy[4]}\n"
            # f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</b>: {vacancy[5]}\n"
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>: {vacancy[6]}\n\n"
            
        )
        stat_text = (
            f"üìÖ–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {await format_date(vacancy[7])}\n"
            f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats[0]} | ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π: {stats[1]}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

        if data.get("ad_msg_id"):
            await bot.delete_message(chat_id=message.chat.id, message_id=data.get("ad_msg_id"))
        if data.get("stat_msg_id"):
            await bot.delete_message(chat_id=message.chat.id, message_id=data.get("stat_msg_id"))

        ad_msg = await message.answer(vacancy_text, reply_markup=vacancy_ikb(is_saved, is_owner))
        stat_msg = await message.answer(stat_text, reply_markup=vacancy_kb_showed if data.get("showed_kb", True) else vacancy_kb_hided)
        
        await state.update_data({"ad_msg_id" :ad_msg.message_id,
        "stat_msg_id" : stat_msg.message_id})

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(
            current_vacancy_id=vacancy[0],
            viewing_vacancy=current_index,
            filtered_vacancies=[v[0] for v in filtered_vacancies],
            is_owner=is_owner,
            is_saved=is_saved
        )
        
    except Exception as e:
        logging.error(f"Error in display_current_vacancy: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")

# –§–∏–ª—å—Ç—Ä—ã
@dp.message(F.text == "üí∞–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç")
async def set_salary_min(message: Message, state: FSMContext):
    await state.set_state(ViewingVacancies.salary_min)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:", reply_markup=back_kb)

@dp.message(ViewingVacancies.salary_min)
async def process_salary_min(message: Message, state: FSMContext):
    if message.text == "‚ùå–ù–∞–∑–∞–¥":
        await state.set_state(ViewingVacancies.viewing_vacancy)
        await display_current_vacancy(message, state)
        return
    
    try:
        salary = int(message.text)
        data = await state.get_data()
        data['vacancy_filters']['salary_min'] = salary
        await state.update_data(data)
        await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    await state.set_state(ViewingVacancies.viewing_vacancy)
    await display_current_vacancy(message, state)


# –§–∏–ª—å—Ç—Ä—ã
@dp.message(F.text == "üí∞–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ")
async def set_salary_min(message: Message, state: FSMContext):
    await state.set_state(ViewingVacancies.salary_min)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:", reply_markup=back_kb)

@dp.message(ViewingVacancies.salary_min)
async def process_salary_min(message: Message, state: FSMContext):
    if message.text == "‚ùå–ù–∞–∑–∞–¥":
        await state.set_state(ViewingVacancies.viewing_vacancy)
        await display_current_vacancy(message, state)
        return
    
    try:
        salary = int(message.text)
        data = await state.get_data()
        data['vacancy_filters']['salary_max'] = salary
        await state.update_data(data)
        await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    await state.set_state(ViewingVacancies.viewing_vacancy)
    await display_current_vacancy(message, state)
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è salary_max...

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è)
@dp.callback_query(F.data == "prev_vacancy")
async def prev_vacancy_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_index = data.get("viewing_vacancy", 0)
        filtered_vacancies = data.get("filtered_vacancies", [])
        
        if not filtered_vacancies:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π", show_alert=True)
            return
        
        new_index = (current_index - 1) % len(filtered_vacancies)
        await state.update_data(viewing_vacancy=new_index)
        
        await display_current_vacancy(callback.message, state)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in prev_vacancy_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" (—Å–ª–µ–¥—É—é—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è)
@dp.callback_query(F.data == "next_vacancy")
async def next_vacancy_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_index = data.get("viewing_vacancy", 0)
        filtered_vacancies = data.get("filtered_vacancies", [])
        
        if not filtered_vacancies:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π", show_alert=True)
            return
        
        new_index = (current_index + 1) % len(filtered_vacancies)
        await state.update_data(viewing_vacancy=new_index)
        
        await display_current_vacancy(callback.message, state)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in next_vacancy_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
@dp.callback_query(F.data == "add_saved_vacancy")
async def add_saved_vacancy_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        vacancy_id = data.get("current_vacancy_id")
        user_id = get_user_id_by_tg_id(callback.from_user.id)
        
        if not vacancy_id or not user_id:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        add_vacancy_to_saved(vacancy_id, user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            is_saved=True,
            saved_vacancies=get_saved_vacancies(user_id)
        )
        
        await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        await display_current_vacancy(callback.message, state)
    except Exception as e:
        logging.error(f"Error in add_saved_vacancy_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
@dp.callback_query(F.data == "remove_saved_vacancy")
async def remove_saved_vacancy_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        vacancy_id = data.get("current_vacancy_id")
        user_id = get_user_id_by_tg_id(callback.from_user.id)
        
        if not vacancy_id or not user_id:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        remove_vacancy_from_saved(vacancy_id, user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            is_saved=False,
            saved_vacancies=get_saved_vacancies(user_id)
        )
        
        await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        await display_current_vacancy(callback.message, state)
    except Exception as e:
        logging.error(f"Error in remove_saved_vacancy_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" (–¥–ª—è —Å–≤–æ–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π)
@dp.callback_query(F.data == "edit_vacancy")
async def edit_vacancy_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not data.get("is_owner", False):
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é", show_alert=True)
            return
        
        vacancy = get_vacancy_by_id(data['current_vacancy_id'])
        if not vacancy:
            await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(
            editing_vacancy={
                'vacancy_id': vacancy[0],
                'title': vacancy[2],
                'description': vacancy[3],
                'salary': vacancy[4],
                'requirements': vacancy[5],
                'contacts': vacancy[6]
            }
        )
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=vacancy_edit_kb
        )
        await state.set_state(NewVacancy.change)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in edit_vacancy_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è" (–¥–ª—è —á—É–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π)
@dp.callback_query(F.data == "get_vacancy_contact")
async def get_vacancy_contact_handler(callback: CallbackQuery, state: FSMContext):
    # try:
    data = await state.get_data()
    vacancy_id = data.get("current_vacancy_id")

    author_data = get_contact_by_user_id(data.get('user_id'))
    
    author_name = author_data[0][0]
    # author_nickname = author_data[0][1]
    author_tg_id = author_data[0][2]
    author_phone = author_data[0][3]
    
    try:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {f'[({author_name})](tg://user?id={author_tg_id})'}",
            parse_mode="MarkdownV2"
            )
    except Exception as e:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–≤—Ç–æ—Ä–∞: {f'{author_phone} - ({author_name})'}",
            parse_mode="MarkdownV2"
            )
        
        
        # if not vacancy_id:
        #     await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        #     return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        # vacancy = get_vacancy_by_id(vacancy_id)
        # if not vacancy or len(vacancy) < 7:
        #     await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        #     return
        
        # contacts = vacancy[6]  # –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å—É 6
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await callback.message.answer(
        #     f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:\n{contacts}",
        #     reply_markup=ReplyKeyboardRemove()
        # )
        await callback.answer()
    # except Exception as e:
    #     logging.error(f"Error in get_vacancy_contact_handler: {e}")
    #     await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message(F.text == "‚úîÔ∏è–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def new_vacancy(message: Message, state: FSMContext):
    await state.clear()

    await state.set_state(NewVacancy.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

@dp.message(NewVacancy.title)
async def process_vacancy_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(NewVacancy.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

@dp.message(NewVacancy.description)
async def process_vacancy_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(NewVacancy.salary)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (—á–∏—Å–ª–æ):")

@dp.message(NewVacancy.salary)
async def process_vacancy_salary(message: Message, state: FSMContext):
    try:
        salary = int(message.text)
        
        # await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:")
        # await state.set_state(NewVacancy.requirements)
        # await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await state.update_data(salary=salary)
    await state.set_state(NewVacancy.contacts)
    print('–∑–∞—Ä–ø–ª–∞—Ç–∞ –≤–≤–µ–ª–∞—Å—å')

@dp.message(NewVacancy.requirements)
async def process_vacancy_requirements(message: Message, state: FSMContext):
    # await state.update_data(requirements=message.text)
    await state.set_state(NewVacancy.contacts)
    # await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:")

@dp.message(NewVacancy.contacts)
async def process_vacancy_contacts(message: Message, state: FSMContext):
    # await state.update_data(contacts=message.text)
    data = await state.get_data()
    print('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
    preview_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
        f"<b>–ó–∞—Ä–ø–ª–∞—Ç–∞</b>: {data['salary']}\n"
        # f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</b>: {data['requirements']}\n"
        # f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>: {data['contacts']}\n\n"
        "–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, –≤—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(preview_text, reply_markup=confirm_kb)
    await state.set_state(NewVacancy.confirm)

@dp.message(NewVacancy.confirm, F.text == "‚úÖ–†–∞–∑–º–µ—Å—Ç–∏—Ç—å")
async def publish_vacancy(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = get_user_id_by_tg_id(message.from_user.id)
    
    vacancy_id = insert_new_vacancy(
        user_id=user_id,
        title=data['title'],
        description=data['description'],
        salary=data['salary'],
        # requirements=data['requirements'],
        requirements='1',
        # contacts=data['contacts']
        contacts = '1'
    )
    
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", reply_markup=main_kb)
    await state.clear()

@dp.message(F.text == "–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_my_vacancies(message: Message, state: FSMContext):
    user_id = get_user_id_by_tg_id(message.from_user.id)
    await state.update_data(
        viewing_vacancy=0,
        saved_vacancies=get_saved_vacancies(user_id),
        only_saved=False,
        vacancy_filters={
            'user_id': user_id,  # –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
            'salary_min': None,
            'salary_max': None
        },
        author = user_id
    )
    await state.set_state(ViewingVacancies.viewing_vacancy)
    await display_current_vacancy(message, state)

@dp.message(F.text == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_saved_vacancies(message: Message, state: FSMContext):
    user_id = get_user_id_by_tg_id(message.from_user.id)
    await state.update_data(
        viewing_vacancy=0,
        saved_vacancies=get_saved_vacancies(user_id),
        only_saved=True,  # –í–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
        vacancy_filters={
            'user_id': '–Ω–µ —É–∫–∞–∑–∞–Ω',
            'salary_min': None,
            'salary_max': None
        }
    )
    await state.set_state(ViewingVacancies.viewing_vacancy)
    await display_current_vacancy(message, state)


# Start the bot
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        close_connection()

if __name__ == '__main__':
    asyncio.run(main())