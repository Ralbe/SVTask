import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram import BaseMiddleware
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio
from utils.stateform import NewAds, CheckMessage, ViewingAds, ProfileStates, Profile
from DataBase.UserDB import (
    add_category, get_ads, insert_new_ad, get_category_id, get_location_id, close_connection,
    get_user_id_by_tg_id, set_user_data, get_user_data, get_categories, get_saved_by_user,
    remove_ad_from_saved, add_ad_in_saved, add_location
)
from keyboards.keyboards import (
    main_kb, ads_kb_if_saved, ads_kb_if_not_saved, confirm_kb, red_kb, back_kb, filter_kb,
    set_user_data_kb, ads_ikb
)
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
# from dotenv import load_dotenv
import os

# Load environment variables
# load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN") or '7588331682:AAHWaQdhjofYczgtFvFj3-EPYBzxR6dCKUY'  # Fallback for testing

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—è—Ö –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_FIELDS = {
    "üë§–ò–º—è": {
        "field_name": "first_name",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "validation": lambda x: (True, x) if x.strip() else (False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    },
    "üë•–§–∞–º–∏–ª–∏—è": {
        "field_name": "second_name",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        "validation": lambda x: (True, x)
    },
    "üìßEmail": {
        "field_name": "email",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        "validation": lambda x: (
            (True, x) if "@" in x and "." in x.split("@")[-1] 
            else (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        )
    },
    "üìû–¢–µ–ª–µ—Ñ–æ–Ω": {
        "field_name": "phone",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º':",
        "keyboard": lambda: ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True
        ),
        "validation": lambda x: (
            (True, x) if x.replace("+", "").isdigit() 
            else (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        ),
        "process_contact": lambda contact: contact.phone_number
    }
}

@dp.message(Command("start"))
async def handle_menu_command(message: Message, state: FSMContext):
    await state.clear()
    try:
        get_user_id_by_tg_id(message.from_user.id)  # Ensure user exists in DB
        data = get_user_data(message.from_user.id)
        await state.update_data({
            "first_name": data[0][0],
            "second_name": data[0][1],
            "phone": data[0][2],
            "email": data[0][3]
        })
        await enter_profile_mode(message, state)
    except Exception as e:
        logging.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(F.text == "üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def handle_main_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª.", reply_markup=main_kb)

#######################################################################
# Profile Management

@dp.message(F.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_data = get_user_data(message.from_user.id)
        
        if not db_data or not db_data[0]:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            await state.update_data({
                "first_name": "",
                "second_name": "",
                "phone": "",
                "email": ""
            })
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            await state.update_data({
                "first_name": db_data[0][0] or "",
                "second_name": db_data[0][1] or "",
                "phone": db_data[0][2] or "",
                "email": db_data[0][3] or ""
            })
        
        # –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        await enter_profile_mode(message, state)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb
        )
        await state.clear()

@dp.message(F.text.in_(PROFILE_FIELDS.keys()))
async def select_profile_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field_info = PROFILE_FIELDS[message.text]
    
    await state.set_state(ProfileStates.waiting_for_field)
    await state.update_data(
        editing_field=field_info["field_name"],
        field_config=message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥–∞
    )
    
    reply_markup = field_info.get("keyboard", lambda: ReplyKeyboardRemove())()
    await message.answer(field_info["prompt"], reply_markup=reply_markup)

@dp.message(ProfileStates.waiting_for_field, F.content_type.in_({"text", "contact"}))
async def process_profile_field(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_data = await state.get_data()
    field_config_key = user_data["field_config"]
    field_info = PROFILE_FIELDS[field_config_key]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–µ—Å–ª–∏ –ø–æ–ª–µ phone –∏ –ø—Ä–∏—Å–ª–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç)
    if message.contact and field_info["field_name"] == "phone":
        value = field_info["process_contact"](message.contact)
    else:
        value = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    is_valid, validated_value_or_error = field_info["validation"](value)
    
    if not is_valid:
        await message.answer(validated_value_or_error)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data({
        user_data["editing_field"]: validated_value_or_error,
        "editing_field": None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ
    })
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª—è
    await enter_profile_mode(message, state)

@dp.message(F.text == "‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def save_profile_handler(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î"""
    data = await state.get_data()
    
    try:
        set_user_data(
            first_name=data.get("first_name"),
            second_name=data.get("second_name"),
            email=data.get("email"),
            phone=data.get("phone"),
            tg_id=message.from_user.id
        )
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=set_user_data_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def reset_profile_handler(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.set_data({})
    await message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=set_user_data_kb)

async def enter_profile_mode(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    data = await state.get_data()
    
    profile_info = (
        "‚öôÔ∏è <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë• <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('second_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìß <b>Email:</b> {data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await message.answer(text=profile_info, reply_markup=set_user_data_kb)
    await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

#######################################################################
# Ad Browsing and Filtering

@dp.message(F.text == "üï∂–û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    await state.update_data(
        viewing_ad=0,
        author='–Ω–µ —É–∫–∞–∑–∞–Ω',
        only_saved=False,
        saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id))
    )
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)

async def check_ad_filters(ad: tuple, filters: dict, state: FSMContext) -> bool:
    ad_id, ad_author, _, _, ad_category, ad_city, ad_price = ad
    data = await state.get_data()
    liked_list = data.get("saved_ads", [])
    only_saved = data.get("only_saved", False)

    if only_saved and (ad_id,) not in liked_list:
        return False
    if filters['author'] != '–Ω–µ —É–∫–∞–∑–∞–Ω' and ad_author != filters['author']:
        return False
    if filters['category'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_category != filters['category']:
        return False
    if filters['city'] != '–Ω–µ —É–∫–∞–∑–∞–Ω' and ad_city != filters['city']:
        return False
    if filters['price_min'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_price < int(filters['price_min']):
        return False
    if filters['price_max'] != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞' and ad_price > int(filters['price_max']):
        return False
    return True

async def find_next_filtered_ad(current_index: int, filters: dict, state: FSMContext, forward: bool = True) -> int:
    ads = get_ads()
    if not ads:
        return -1
    step = 1 if forward else -1
    checked = 0
    total_ads = len(ads)
    while checked < total_ads:
        current_index = (current_index + step) % total_ads
        if current_index < 0:
            current_index = total_ads - 1
        if await check_ad_filters(ads[current_index], filters, state):
            return current_index
        checked += 1
    return current_index

async def display_current_ad(message: Message, state: FSMContext):
    try:
        ads = get_ads()
    except Exception as e:
        logging.error(f"Failed to fetch ads: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }

    if not ads:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    if not await check_ad_filters(ads[current_index], filters, state):
        current_index = await find_next_filtered_ad(current_index, filters, state, forward=True)
        await state.update_data(viewing_ad=current_index)

    ad = ads[current_index]
    liked = (ad[0],) in data.get("saved_ads", [])

    ad_text = (
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {ad[4]}\n"
        f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {ad[5]}\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {ad[2]}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {ad[3]}\n"
        f"<b>–¶–µ–Ω–∞</b>: {ad[6]}‚ÇΩ"
    )
    await message.answer(ad_text, reply_markup=ads_kb_if_saved if liked else ads_kb_if_not_saved)
    logging.info(f"Displayed ad {current_index}/{len(ads)} with filters: {filters}")

@dp.message(F.text == "–í–ø–µ—Ä–µ–¥‚û°Ô∏è", ViewingAds.viewing_ad)
async def next_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    new_index = await find_next_filtered_ad(current_index, filters, state, forward=True)
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

@dp.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", ViewingAds.viewing_ad)
async def prev_ad(message: Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("viewing_ad", 0)
    filters = {
        'category': data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'city': data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'price_min': data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'price_max': data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
        'author': data.get('author', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    }
    new_index = await find_next_filtered_ad(current_index, filters, state, forward=False)
    await state.update_data(viewing_ad=new_index)
    await display_current_ad(message, state)

async def show_filters(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"–§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞ –æ—Ç: {data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–¶–µ–Ω–∞ –¥–æ: {data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
        reply_markup=filter_kb
    )

async def enter_filter_mode(message: Message, state: FSMContext):
    await state.set_state(ViewingAds.filters)
    await show_filters(message, state)

@dp.message(F.text == "‚öôÔ∏è–§–∏–ª—å—Ç—Ä—ã")
async def filters_command(message: Message, state: FSMContext):
    await enter_filter_mode(message, state)

@dp.message(F.text == "üìÅ–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
async def set_category(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}", reply_markup=filter_kb)
    await enter_filter_mode(message, state)

@dp.message(F.text == "üèôÔ∏è–ì–æ—Ä–æ–¥")
async def set_city(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}", reply_markup=filter_kb)
    await enter_filter_mode(message, state)

@dp.message(F.text == "üí∞–¶–µ–Ω–∞ –æ—Ç")
async def set_price_min(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.price_min)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.price_min)
async def process_price_min(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_min=price)
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

@dp.message(F.text == "üí∞–¶–µ–Ω–∞ –¥–æ")
async def set_price_max(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.price_max)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ViewingAds.price_max)
async def process_price_max(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_max=price)
        await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

@dp.message(F.text == "‚ù§Ô∏è–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
async def remove_from_saved(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        ads = get_ads()
        ad = ads[data["viewing_ad"]]
        remove_ad_from_saved(ad[0], get_user_id_by_tg_id(message.from_user.id))
        await state.update_data(saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", reply_markup=ads_kb_if_not_saved)
        await message.delete()
        await display_current_ad(message, state)
    except Exception as e:
        logging.error(f"Error removing from saved: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")

@dp.message(F.text == "‚ô°–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def add_to_saved(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        ads = get_ads()
        ad = ads[data["viewing_ad"]]
        add_ad_in_saved(ad[0], get_user_id_by_tg_id(message.from_user.id))
        await state.update_data(saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)))
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", reply_markup=ads_kb_if_saved)
        await message.delete()
        await display_current_ad(message, state)
    except Exception as e:
        logging.error(f"Error adding to saved: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

@dp.message(F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def finish_filters(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.set_data({
        "viewing_ad": data.get("viewing_ad", 0),
        "saved_ads": data.get("saved_ads", []),
        "only_saved": False,
        "author": "–Ω–µ —É–∫–∞–∑–∞–Ω"
    })
    await show_filters(message, state)

@dp.message(F.text == "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_own_ads(message: Message, state: FSMContext):
    await state.update_data(
        viewing_ad=0,
        saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)),
        author=get_user_id_by_tg_id(message.from_user.id),
        only_saved=False
    )
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)

@dp.message(F.text == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_saved_ads(message: Message, state: FSMContext):
    await state.update_data(
        viewing_ad=0,
        saved_ads=get_saved_by_user(get_user_id_by_tg_id(message.from_user.id)),
        only_saved=True,
        author="–Ω–µ —É–∫–∞–∑–∞–Ω"
    )
    await state.set_state(ViewingAds.viewing_ad)
    await display_current_ad(message, state)

#######################################################################
# Ad Creation

@dp.message(F.text == "‚úîÔ∏è–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ads(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(NewAds.title)
    await message.reply("1) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

@dp.message(NewAds.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("2) –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.description)

@dp.message(NewAds.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("3) –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.category)

@dp.message(NewAds.category)
async def process_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.reply("4) –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>")
    await state.set_state(NewAds.location)

@dp.message(NewAds.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.reply("5) –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")
    await state.set_state(NewAds.money)

@dp.message(NewAds.money)
async def process_money(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(money=price)
        data = await state.get_data()
        ad_text = (
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
            f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
            f"<b>–¶–µ–Ω–∞</b>: {price}‚ÇΩ"
        )
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, reply_markup=confirm_kb)
        await state.set_state(NewAds.confirm)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@dp.message(NewAds.confirm)
async def message_okey(message: Message, state: FSMContext):
    if message.text == "‚úÖ–†–∞–∑–º–µ—Å—Ç–∏—Ç—å":
        try:
            data = await state.get_data()
            tg_id = message.from_user.id
            category = data["category"]
            location = data["location"]
            title = data["title"]
            description = data["description"]
            money = data["money"]

            user_id = get_user_id_by_tg_id(tg_id)
            category_id = get_category_id(category)
            if not category_id:
                category_id = add_category(category)
            location_id = get_location_id(location)
            if not location_id:
                location_id = add_location(location)

            insert_new_ad(user_id, category_id, location_id, title, description, money)
            await message.reply("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ")
            await state.clear()
            await handle_menu_command(message, state)
        except Exception as e:
            logging.error(f"Error publishing ad: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    elif message.text == "‚úçÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await state.set_state(NewAds.change)
        await message.answer("–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=red_kb)
    else:
        data = await state.get_data()
        ad_text = (
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
            f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
            f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ"
        )
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:\n\n" + ad_text, reply_markup=confirm_kb)

@dp.message(NewAds.change)
async def select_field_to_edit(message: Message, state: FSMContext):
    field_map = {
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫": "title",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ì–æ—Ä–æ–¥": "location",
        "–¶–µ–Ω–∞": "money",
        "–ù–∞–∑–∞–¥": "back"
    }
    choice = message.text
    if choice not in field_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=red_kb)
        return

    if choice == "–ù–∞–∑–∞–¥":
        await state.set_state(NewAds.confirm)
        data = await state.get_data()
        ad_text = (
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
            f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
            f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ"
        )
        await message.answer("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, reply_markup=confirm_kb)
        return

    field_name = field_map[choice]
    await state.update_data(editing_field=field_name)
    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        "category": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "location": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>:",
        "money": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
    }
    await message.answer(prompts[field_name], reply_markup=back_kb)
    await state.set_state(NewAds.editing_field)

@dp.message(NewAds.editing_field)
async def process_field_edit(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await state.set_state(NewAds.change)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=red_kb)
        return

    data = await state.get_data()
    field_name = data.get("editing_field")
    if not field_name:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        await state.set_state(NewAds.change)
        return

    if field_name == "money":
        try:
            price = int(message.text)
            await state.update_data({field_name: price})
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
    else:
        await state.update_data({field_name: message.text})

    current_data = await state.get_data()
    if "editing_field" in current_data:
        new_data = current_data.copy()
        del new_data["editing_field"]
        await state.set_data(new_data)

    await state.set_state(NewAds.confirm)
    data = await state.get_data()
    ad_text = (
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {data['category']}\n"
        f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {data['location']}\n"
        f"<b>–¶–µ–Ω–∞</b>: {data['money']}‚ÇΩ"
    )
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n" + ad_text, reply_markup=confirm_kb)

# Start the bot
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        close_connection()

if __name__ == '__main__':
    asyncio.run(main())