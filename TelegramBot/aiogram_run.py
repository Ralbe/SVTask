import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from utils.stateform import Form, NewAds
from DataBase.UserDB import get_ads, get_user_by_email, authenticate_user, add_user, insert_new_ad, get_category_id, get_location_id, close_connection
from keyboards.keyboards import main_kb, ads_kb, start_kb
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '7754829803:AAF9bmNcb635GC0emlEjkd3x8_YI75IJYz4'
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

ads = get_ads()
current_ad_index = 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "üîê–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def cmd_start(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Current state: {current_state}")
    if current_state == Form.authorized.state:
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(Form.email)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è email
@dp.message(Form.email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    user = get_user_by_email(email)
    if "@" in email:
        if user:
            await state.update_data(email=email)
            await state.update_data(current_email=email)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            await state.set_state(Form.auth_password)
        else:
            await state.update_data(email=email)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
            await state.set_state(Form.login)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(Form.email)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è auth_password
@dp.message(Form.auth_password)
async def process_auth_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    email = user_data['email']

    user = authenticate_user(email, password)

    if user:
        await state.update_data(user_id=user[0])
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        await state.set_state(Form.authorized)
        await authorized_action(message, state)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É")
        await state.set_state(Form.email)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è login
@dp.message(Form.login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(Form.password)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è password
@dp.message(Form.password)
async def process_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    user_data = await state.get_data()
    email = user_data['email']
    login = user_data['login']
    password = user_data['password']

    add_user(login, password, email)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.set_state(Form.authorized)
    await state.update_data(current_email=email)
    await authorized_action(message, state)

async def authorized_action(message: Message, state: FSMContext):
    check_state = await state.get_state()
    logging.info(f"Authorized action state: {check_state}")
    if check_state == Form.authorized.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–¥–µ–ª.", reply_markup=main_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é.")

@dp.message(Command("menu"))
async def handle_menu_command(message: Message, state: FSMContext):
    await authorized_action(message, state)

@dp.message(F.text == "üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def handle_main_text(message: Message, state: FSMContext):
    await authorized_action(message, state)

@dp.message(F.text == "üö™–í—ã–π—Ç–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞")
async def exit(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state == Form.authorized.state:
        user_data = await state.get_data()
        email = user_data.get('current_email')
        await message.answer(f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ {email}", reply_markup=start_kb)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é.")

@dp.message(F.text == "üï∂–û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state == Form.authorized.state:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=ads_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é.")

@dp.message(F.text == "–í–ø–µ—Ä–µ–¥‚û°Ô∏è")
async def display_ad(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state == Form.authorized.state:
        global current_ad_index
        current_ad_index += 1
        if current_ad_index >= len(ads):
            current_ad_index = 0
        ad = ads[current_ad_index]
        ad_text = (f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {ad[3]}\n"
                   f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {ad[4]}, {ad[5]}\n"
                   f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {ad[1]}\n"
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {ad[2]}\n"
                   f"<b>–¶–µ–Ω–∞</b>: {ad[6]}")
        await message.answer(ad_text, reply_markup=ads_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é.")

@dp.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
async def display_ad(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state == Form.authorized.state:
        global current_ad_index
        current_ad_index -= 1
        if current_ad_index < 0:
            current_ad_index = len(ads) - 1
        ad = ads[current_ad_index]
        ad_text = (f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {ad[3]}\n"
                   f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>: {ad[4]}, {ad[5]}\n"
                   f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>: {ad[1]}\n"
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {ad[2]}\n"
                   f"<b>–¶–µ–Ω–∞</b>: {ad[6]}")
        await message.answer(ad_text, reply_markup=ads_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é.")

@dp.message(F.text == "‚úîÔ∏è–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def new_ads(message: Message, state: FSMContext):
    check_state = await state.get_state()
    if check_state == Form.authorized.state:
        await message.reply("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n"
                            "1) –í–≤–æ–¥–∏—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                            "2) –í–≤–æ–¥–∏—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
                            "3) –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
                            "4) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b> <b>–†–µ–≥–∏–æ–Ω</b> <b>–°—Ç—Ä–∞–Ω–∞</b>\n"
                            "5) –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–µ–Ω–∞\n")
        await message.reply("1) –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        await state.set_state(NewAds.title)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é.")

@dp.message(NewAds.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("2) –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.description)

@dp.message(NewAds.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("3) –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(NewAds.category)

@dp.message(NewAds.category)
async def process_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.reply("4) –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ì–æ—Ä–æ–¥</b>")
    await state.set_state(NewAds.location)

@dp.message(NewAds.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.reply("5) –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")
    await state.set_state(NewAds.money)


# –Ø –¥–æ–ª–±–∞–µ–±, —è —Ö–∑ –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π
@dp.message()
async def check_authorization(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Check authorization state: {current_state}")
    if current_state != Form.authorized.state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=start_kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
close_connection()
