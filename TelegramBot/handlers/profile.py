from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from DataBase.UserDB import get_user_data, set_user_data
from keyboards.keyboards import set_user_data_kb, main_kb
import logging
from utils.states import ProfileStates

PROFILE_FIELDS = {
    "üë§–ò–º—è": {
        "field_name": "first_name",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        "validation": lambda x: (True, x) if x.strip() else (False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    },
    "üë•–§–∞–º–∏–ª–∏—è": {
        "field_name": "second_name",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
        "validation": lambda x: (True, x)
    },
    "üìßEmail": {
        "field_name": "email",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        "validation": lambda x: (
            (True, x) if "@" in x and "." in x.split("@")[-1] 
            else (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        )
    },
    "üìû–¢–µ–ª–µ—Ñ–æ–Ω": {
        "field_name": "phone",
        "prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º':",
        "keyboard": lambda: ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True
        ),
        "validation": lambda x: (
            (True, x) if x.replace("+", "").isdigit() 
            else (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        ),
        "process_contact": lambda contact: contact.phone_number
    }
}

async def profile_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db_data = get_user_data(message.from_user.id)
        
        if not db_data or not db_data[0]:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            await state.update_data({
                "first_name": "",
                "second_name": "",
                "phone": "",
                "email": ""
            })
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            await state.update_data({
                "first_name": db_data[0][0] or "",
                "second_name": db_data[0][1] or "",
                "phone": db_data[0][2] or "",
                "email": db_data[0][3] or ""
            })
        
        # –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        await enter_profile_mode(message, state)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_kb
        )
        await state.clear()

async def select_profile_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field_info = PROFILE_FIELDS[message.text]
    
    await state.set_state(ProfileStates.waiting_for_field)
    await state.update_data(
        editing_field=field_info["field_name"],
        field_config=message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥–∞
    )
    
    reply_markup = field_info.get("keyboard", lambda: ReplyKeyboardRemove())()
    await message.answer(field_info["prompt"], reply_markup=reply_markup)

async def process_profile_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_data = await state.get_data()
    field_config_key = user_data["field_config"]
    field_info = PROFILE_FIELDS[field_config_key]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–µ—Å–ª–∏ –ø–æ–ª–µ phone –∏ –ø—Ä–∏—Å–ª–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç)
    if message.contact and field_info["field_name"] == "phone":
        value = field_info["process_contact"](message.contact)
    else:
        value = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    is_valid, validated_value_or_error = field_info["validation"](value)
    
    if not is_valid:
        await message.answer(validated_value_or_error)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data({
        user_data["editing_field"]: validated_value_or_error,
        "editing_field": None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ
    })
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª—è
    await enter_profile_mode(message, state)

async def save_profile_handler(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î"""
    data = await state.get_data()
    
    try:
        set_user_data(
            first_name=data.get("first_name"),
            second_name=data.get("second_name"),
            email=data.get("email"),
            phone=data.get("phone"),
            tg_id=message.from_user.id
        )
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=set_user_data_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def reset_profile_handler(message: types.Message, state: FSMContext):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.set_data({})
    await message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup=set_user_data_kb)

async def enter_profile_mode(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    data = await state.get_data()
    
    profile_info = (
        "‚öôÔ∏è <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë• <b>–§–∞–º–∏–ª–∏—è:</b> {data.get('second_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìß <b>Email:</b> {data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await message.answer(text=profile_info, reply_markup=set_user_data_kb)
    await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

def register_handlers(dp):
    dp.message.register(profile_command, F.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å")
    dp.message.register(select_profile_field, F.text.in_(PROFILE_FIELDS.keys()))
    dp.message.register(process_profile_field, ProfileStates.waiting_for_field, F.content_type.in_({"text", "contact"}))
    dp.message.register(save_profile_handler, F.text == "‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    dp.message.register(reset_profile_handler, F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")