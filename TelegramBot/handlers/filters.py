from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.keyboards import filter_kb, back_kb, category_kb
from utils.states import ViewingAds
from DataBase.UserDB import get_categories

categories = get_categories()

async def show_filters(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"–§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        # f"–ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¶–µ–Ω–∞ –æ—Ç: {data.get('price_min', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–¶–µ–Ω–∞ –¥–æ: {data.get('price_max', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}",
        reply_markup=filter_kb
    )

async def enter_filter_mode(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.filters)
    await show_filters(message, state)

async def filters_command(message: types.Message, state: FSMContext):
    await enter_filter_mode(message, state)

async def set_category(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=await category_kb(categories))

async def process_category(message: types.Message, state: FSMContext):
    if message.text == "‚ùå–ù–∞–∑–∞–¥":
        await enter_filter_mode(message, state)
    else:
        await state.update_data(category=message.text)
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message.text}", reply_markup=filter_kb)
        await enter_filter_mode(message, state)

async def set_price_min(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.price_min)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

async def process_price_min(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_min=price)
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

async def set_price_max(message: types.Message, state: FSMContext):
    await state.set_state(ViewingAds.price_max)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:", reply_markup=types.ReplyKeyboardRemove())

async def process_price_max(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price_max=price)
        await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}", reply_markup=filter_kb)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    await enter_filter_mode(message, state)

async def finish_filters(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.set_data({
        "viewing_ad": data.get("viewing_ad", 0),
        "saved_ads": data.get("saved_ads", []),
        "only_saved": False,
        "author": "–Ω–µ —É–∫–∞–∑–∞–Ω"
    })
    await show_filters(message, state)

def register_handlers(dp):
    dp.message.register(filters_command, F.text == "‚öôÔ∏è–§–∏–ª—å—Ç—Ä—ã")
    dp.message.register(set_category, F.text == "üìÅ–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    dp.message.register(process_category, ViewingAds.category)
    dp.message.register(set_price_min, F.text == "üí∞–¶–µ–Ω–∞ –æ—Ç")
    dp.message.register(process_price_min, ViewingAds.price_min)
    dp.message.register(set_price_max, F.text == "üí∞–¶–µ–Ω–∞ –¥–æ")
    dp.message.register(process_price_max, ViewingAds.price_max)
    dp.message.register(finish_filters, F.text == "‚ùå–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")